******* Rooted Trees *******

((FIGURE 1))
  - Parents
  - Children
  - Siblings

((FIGURE 2))
  - root: node with no parents (can only be one in a tree)
  - internal node: has children
  - leaf: has no children

  - subtree: starting at any node within the larger tree, pick one
              root and include all the descendants
    - but cant take partial trees (like only nodes 11, 3, 6 in the
              FIGURE 2)

  Edge:
    - (u, v) is an edge, if u is the parents of v
      - Example: (11, 3) is an edge

  Path
    - p = (v1, v2, v3, ..., vk) is a path if each two consecutive
            nodes forms an edge
      - Example: p1 = (11, 3, 1, 9)
    - dont have to go down to the end of the tree/all the children
      - Example: p2 = (11, 3, 1)

  Length of a Path
    - |p| = # edges in p
      - Example: |p1| = 3

  Ancestor ((FIGURE 1))
    - u is an ancestor of v, if there is a path from u to v
    - alternatively, if v is in the subtree rooted by u
      - Examples:
        - 11 is an ancestor of 1
        - 5 is an ancestor of 4
        - 8 is an ancestor of 8
        ( any parent is an ancestor of its child )
        - 4 is not an ancestor of 11
        - 11 is not an ancestor of 4

  Descendant
    - u is a descendant of v, if v is an ancestor of u
      - Eamples:
        - 1 is a descendant of 11
        - 4 is a descendant of 5

  Depth of a node
    - depth(v) is the length of the path from the root to v
      - Example: depth(1) = 3

  Height of a tree:
    - height(T) is the length of a longest path in T
      - Example: height(T) = 4


Binary Tree
  - a tree T is a binary tree if the number of children of each
    node in T is <= 2
  - ((FIGURE 2)) is not a binary tree
    - if we removed one out of 9, 7, 12; then the tree would be
      binary


  Full (Proper) Binary Tree
    - a binary tree T is a full binary tree if the number of children
      of each node in T is either 2 or 0
    - ((FIGURE 3))


  Complete Binary Tree
    - a binary tree T is a complete binary tree if all the levels of
      T contain all possible nodes
    - ((FIGURE 4))



((FIGURE 5)) example case for the code below
((FIGURE 7))
------------v-- class code --v-------------

class Linked_Binary_Tree:

  class Node: # classify a node for these specific use case

    def __init__(self, data, left=None, right=None):
      self.data = data
      self.parent = None
      self.left = left # children
      if (left is not None):
        left.parent = self # does it matter if you do self.left.parent = self? --> doesnt matter, they're making the same reference
      self.right = right
      if (right is not None):
        right.parent = right

  def __init__(self, root=None):
    self.root = root
    self.size = ...



------------^-- class code --^-------------

------------v-- use of class code --v-------------

import Linked_Binary_Tree

# example
# node = Linked_Binary_Tree.Linked_Binary_Tree.Node(7) # ((FIGURE 6))

l_ch1 = Linked_Binary_Tree.Linked_Binary_Tree.Node(1)
r_ch1 = Linked_Binary_Tree.Linked_Binary_Tree.Node(6)

r_ch1 = Linked_Binary_Tree.Linked_Binary_Tree.Node(2, l_ch1, r_ch1)
l_ch1 = Linked_Binary_Tree.Linked_Binary_Tree.Node(4)

subtree_root = Linked_Binary_Tree.Linked_Binary_Tree.Node(5, l_ch2, r_ch2)

print()

tree = Linked_Binary_Tree.Linked_Binary_Tree(subtree_root)



------------^-- use of class code --^-------------
